<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Data Quality Dashboard</title>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">
  <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <style>
    body { font-family: sans-serif; margin: 20px; background: #f2f4f8; }
    h1 { text-align: center; }
    #filters { display: flex; gap: 10px; margin-bottom: 10px; align-items: center; flex-wrap: wrap; }
    select, input, button { padding: 4px; margin-right: 10px; }
    #chart { margin-top: 30px; }
    svg { width: 100%; height: 600px; }
  </style>
</head>
<body>

<h1>SQL Table Coverage Dashboard</h1>

<div id="filters">
  <label>Tables:
    <select id="tableFilter" multiple size="5"></select>
  </label>
  <label>From:
    <input type="date" id="fromDate">
  </label>
  <label>To:
    <input type="date" id="toDate">
  </label>
  <label>Group by:
    <select id="groupBy">
      <option>Day</option>
      <option>Week</option>
      <option selected>Month</option>
      <option>Year</option>
    </select>
  </label>
  <button id="resetFilters">Reset Filters</button>
</div>

<table id="qualityTable" class="display" style="width:100%">
  <thead><tr><th>Table</th><th>Period</th><th>Avg Coverage %</th></tr></thead>
  <tbody id="tableBody"></tbody>
</table>

<div id="chart"><svg></svg></div>

<script>
// ------------------------------
// Config & Mock Data
// ------------------------------
const tables = Array.from({ length: 20 }, (_, i) => `table_${i + 1}`);
let mockData = [];

function genData(n = 1000) {
  const start = new Date(2024, 0, 1);
  return Array.from({ length: n }, () => {
    const table = tables[Math.floor(Math.random() * tables.length)];
    const date = new Date(start.getTime() + Math.random() * 1000 * 60 * 60 * 24 * 180);
    return {
      table,
      date: date.toISOString().split('T')[0],
      coverage: +(Math.random()).toFixed(2)
    };
  });
}

// ------------------------------
// Helpers
// ------------------------------
function getColor(p) {
  const r = Math.floor(255 - (p * 2.55));
  const g = Math.floor(p * 2.55);
  return `rgb(${r},${g},50)`;
}

function aggDate(d, group) {
  const date = new Date(d);
  if (group === 'Week') return `${date.getFullYear()}-W${Math.ceil(date.getDate() / 7)}`;
  if (group === 'Month') return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
  if (group === 'Year') return `${date.getFullYear()}`;
  return d;
}

const color = d3.scaleOrdinal(tables, d3.schemeSet3);

// ------------------------------
// URL Filter Persistence
// ------------------------------
function getParams() {
  const params = new URLSearchParams(window.location.search);
  return {
    tables: params.get("tables")?.split(",") || [],
    from: params.get("from") || "",
    to: params.get("to") || "",
    group: params.get("group") || "Month"
  };
}

function applyParams(params) {
  $('#tableFilter').val(params.tables.length ? params.tables : tables);
  $('#tableFilter option').prop('selected', true);
  $('#fromDate').val(params.from);
  $('#toDate').val(params.to);
  $('#groupBy').val(params.group);
}

function updateURL() {
  const params = new URLSearchParams();
  const selected = $('#tableFilter').val() || [];
  if (selected.length) params.set("tables", selected.join(","));
  if ($('#fromDate').val()) params.set("from", $('#fromDate').val());
  if ($('#toDate').val()) params.set("to", $('#toDate').val());
  params.set("group", $('#groupBy').val());
  history.replaceState(null, "", `?${params.toString()}`);
}

// ------------------------------
// Data Filtering & Aggregation
// ------------------------------
function filterData() {
  const from = $('#fromDate').val();
  const to = $('#toDate').val();
  const selectedTables = $('#tableFilter').val();
  const selected = selectedTables && selectedTables.length > 0 ? selectedTables : tables;
  $('#tableFilter').val(selected);  // Force re-select for visibility

  return mockData.filter(d =>
    selected.includes(d.table) &&
    (!from || d.date >= from) &&
    (!to || d.date <= to)
  );
}

function aggregate(data, groupBy, selected) {
  const nested = d3.rollups(
    data,
    v => d3.mean(v, d => d.coverage * 100),
    d => aggDate(d.date, groupBy),
    d => d.table
  );

  const periods = Array.from(new Set(nested.map(d => d[0]))).sort();
  const result = periods.map(period => {
    const entry = { period };
    selected.forEach(tbl => {
      const val = nested.find(d => d[0] === period)?.[1].find(p => p[0] === tbl);
      entry[tbl] = val ? val[1] : 0;
    });
    return entry;
  });

  return { periods, result };
}

// ------------------------------
// Table & Chart Rendering
// ------------------------------
function populateTable(rows) {
  const tbody = $('#tableBody').empty();
  rows.forEach(r => {
    const bg = getColor(r.coverage);
    tbody.append(`<tr><td>${r.table}</td><td>${r.period}</td><td style="background:${bg};color:white">${r.coverage.toFixed(1)}%</td></tr>`);
  });
  $('#qualityTable').DataTable().clear().rows.add($('#tableBody tr')).draw();
}

function drawChart(data, groupBy, selected) {
  const { periods, result } = aggregate(data, groupBy, selected);
  const num = selected.length || 1;

  const stack = d3.stack().keys(selected)(result);
  const svg = d3.select("svg");
  svg.selectAll("*").remove();

  const margin = { top: 40, right: 20, bottom: 100, left: 50 };
  const width = svg.node().clientWidth - margin.left - margin.right;
  const height = svg.node().clientHeight - margin.top - margin.bottom;
  const g = svg.append("g").attr("transform", `translate(${margin.left},${margin.top})`);

  const x = d3.scaleBand().domain(periods).range([0, width]).padding(0.1);
  const y = d3.scaleLinear().domain([0, 100]).range([height, 0]);

  g.append("g").call(d3.axisLeft(y).ticks(5).tickFormat(d => d + "%"));
  g.append("g").attr("transform", `translate(0,${height})`)
    .call(d3.axisBottom(x)).selectAll("text").attr("transform", "rotate(-45)").style("text-anchor", "end");

  g.selectAll("g.layer")
    .data(stack).join("g")
    .attr("fill", d => color(d.key))
    .selectAll("rect")
    .data(d => d).join("rect")
    .attr("x", d => x(d.data.period))
    .attr("y", d => y(d[1] / num))
    .attr("height", d => y(d[0] / num) - y(d[1] / num))
    .attr("width", x.bandwidth())
    .append("title")
    .text(d => `${d.data.period} ${d.key}: ${(d[1] - d[0]).toFixed(1)}%`);

  // Legend
  const legend = svg.append("g").attr("transform", `translate(${margin.left}, 10)`);
  selected.forEach((tbl, i) => {
    const item = legend.append("g").attr("transform", `translate(${i * 100},0)`);
    item.append("rect").attr("width", 12).attr("height", 12).attr("fill", color(tbl));
    item.append("text").attr("x", 16).attr("y", 10).text(tbl);
  });
}

// ------------------------------
// Master Update Function
// ------------------------------
function update() {
  updateURL();
  const selectedTables = $('#tableFilter').val();
  const selected = selectedTables && selectedTables.length > 0 ? selectedTables : tables;
  const groupBy = $('#groupBy').val();
  const filtered = filterData();
  const { result } = aggregate(filtered, groupBy, selected);

  const tableData = result.flatMap(row =>
    selected.map(tbl => ({
      table: tbl,
      period: row.period,
      coverage: row[tbl]
    }))
  ).filter(r => r.coverage !== undefined);

  populateTable(tableData);
  drawChart(filtered, groupBy, selected);
}

// ------------------------------
// Init
// ------------------------------
$(document).ready(() => {
  mockData = genData(1000); // 🔁 Replace with real data if needed
  tables.forEach(t => $('#tableFilter').append(`<option value="${t}">${t}</option>`));
  $('#qualityTable').DataTable({ pageLength: 25 });

  const params = getParams();
  applyParams(params);

  $('#tableFilter, #fromDate, #toDate, #groupBy').on('change', update);
  $('#resetFilters').on('click', () => {
    $('#tableFilter').val(tables);
    $('#tableFilter option').prop('selected', true);
    $('#fromDate').val('');
    $('#toDate').val('');
    $('#groupBy').val('Month');
    update();
  });

  update();
});
</script>

</body>
</html>
