import json

# Prepare data
df_clean = df.copy()
df_clean = df_clean[~df_clean['coverage'].isna()]
df_clean = df_clean.sort_index()

heatmap_data = {
    int(ts.timestamp()): round(val * 100, 2)
    for ts, val in df_clean['coverage'].items()
}

# HTML template with inline error logging
html_template = f"""
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Calendar Heatmap</title>
  <link rel="stylesheet" href="https://unpkg.com/cal-heatmap@4.0.0/cal-heatmap.css" />
  <style>
    body {{ font-family: sans-serif; padding: 2em; }}
    #cal-heatmap {{ height: 200px; }}
    #error-log {{ margin-top: 2em; color: red; white-space: pre-wrap; }}
  </style>
</head>
<body>
  <h2>Data Coverage Calendar Heatmap</h2>
  <div id="cal-heatmap"></div>

  <script src="https://unpkg.com/cal-heatmap@4.0.0/dist/cal-heatmap.min.js"></script>

  <script>
    const logError = (err) => {{
      const el = document.getElementById("error-log");
      el.innerText = "ðŸš¨ Error: " + err.message + "\\n" + (err.stack || "");
    }};

    try {{
      const cal = new CalHeatmap();
      cal.paint({{
        range: 2,
        domain: "year",
        subDomain: "day",
        start: new Date("{df_clean.index.min().strftime('%Y-%m-%d')}"),
        data: {{
          source: {json.dumps(heatmap_data)},
          type: "json"
        }},
        scale: {{
          color: {{
            type: "linear",
            range: ["#e0f3db", "#43a2ca"]
          }}
        }},
        tooltip: true,
        domainDynamicDimension: false
      }}).catch(logError);
    }} catch (err) {{
      logError(err);
    }}
  </script>

  <pre id="error-log"></pre>
</body>
</html>
"""

# Write to file
with open("calendar_heatmap.html", "w", encoding="utf-8") as f:
    f.write(html_template)

print("âœ… HTML with inline error logging written: calendar_heatmap.html")
